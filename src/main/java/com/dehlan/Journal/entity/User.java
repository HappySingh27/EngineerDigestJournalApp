package com.dehlan.Journal.entity;


// POJO Class

import lombok.*;
import org.bson.types.ObjectId;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.DBRef;
import org.springframework.data.mongodb.core.mapping.Document;
import java.util.ArrayList;
import java.util.List;

/*
*  @Document - will tell SpringBoot that this class is mapped with MongoDB collection
*  Entity - User - will give login functionality using this user class
*  Every user will have multiple entities (JournalEntry in our case)
*  JournalEntry will be associated to particular User,
*  Each User will have their own entities (JournalEntry)
*  We will implement basic User authentication using this.
*
*/

/*

***Generated by AI, may contain errors***

 * ✅ Important: Model/Entity classes should NOT be Spring Beans
 *
 * - @Document maps this class to a MongoDB collection for persistence,
 *   but does NOT register it with the Spring IoC container.
 * - Spring Beans are registered via @Component, @Service, @Repository,
 *   or @Bean definitions. Only these are managed and injectable by Spring.
 *
 * ⚠️ Why not make models beans?
 * - Entities represent **per-instance data**, not shared services or components.
 * - Autowiring them (e.g., @Autowired private User user;) fails since they
 *   are not managed by Spring and leads to runtime errors :contentReference[officiate:1]{index=1}.
 * - Mixing persistence entities with Spring context breaks **separation of concerns**, can cause tight coupling, and makes testing harder :contentReference[oaicite:2]{index=2}.
 *
 * ✅ Best practice:
 * - Use Services (@Service) and Repositories (@Repository/MongoRepository) as beans.
 * - Keep entity classes simple, used only for data mapping.
 */


// will tell SpringBoot that this class is mapped with MongoDB collection ("journal_entries"))
@Document(collection = "user")
// equivalent to @Getter, @Setter, @ToString, @EqualsAndHashCode, @RequiredArgsConstructor
@Data
@NoArgsConstructor
public class User {

    @Id  // to make unique key in MongoDb
    private ObjectId id;

    /*
     * need to update property in application.properties file,
     * spring.data.mongodb.auto-index-creation=true, otherwise
     * @Indexed would not work
     *
     * Annotations like @Component, @Service, @RestController are purely Spring-level concepts and
     * are handled internally via component scanning — no extra config needed.
     * But @Indexed performs an external DB operation, so Spring requires explicit permission (via properties),
     * to avoid risky automatic schema changes — especially in production.
     *
     * */
    @Indexed(unique = true)
    @NonNull
    private String userName;
    @NonNull
    private String password;
    private List<String> roles;

    /*
    * @DBRef is used in a model class to tell Spring Data MongoDB:
    * “This field is a reference to another document in another MongoDB collection.”
    *  This is like a Foreign key
    * */
    @DBRef
    private List<JournalEntry> journalEntries = new ArrayList<>();

}
